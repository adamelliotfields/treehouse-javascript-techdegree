{"version":3,"sources":["all.min.js"],"names":["$","fn","autogrow","opts","resize","e","clone","box","this","oldHeight","innerHeight","newHeight","scrollHeight","minHeight","data","scrollTop","animate","stop","height","speed","which","ctrlKey","addClass","cloneClass","css","position","zIndex","val","after","remove","focus","that","overflow","selector","defaults","context","document","fixMinHeight","onInitialize","isPlainObject","extend","each","i","elem","min","is","parseInt","visibility","display","append","call","on","jQuery","ready","parent","copy","find","click","removeClass","blur","link","target","attr","window","open","input","text","state","wrap"],"mappings":"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","file":"all.min.js","sourcesContent":["(function ($) {\n  // pass in just the context as a $(obj) or a settings JS object\n  $.fn.autogrow = function (opts) {\n    var that = $(this).css({ overflow: 'hidden', resize: 'none' }); // prevent scrollies\n    var selector = that.selector;\n    var defaults = {\n      context: $(document), // what to wire events to\n      animate: true, // if you want the size change to animate\n      speed: 200, // speed of animation\n      fixMinHeight: true, // if you don't want the box to shrink below its initial size\n      cloneClass: 'autogrowclone', // helper CSS class for clone if you need to add special rules\n      onInitialize: false // resizes the textareas when the plugin is initialized\n    };\n    opts = $.isPlainObject(opts) ? opts : { context: opts || $(document) };\n    opts = $.extend({}, defaults, opts);\n    that.each(function (i, elem) {\n      var min;\n      var clone;\n      elem = $(elem);\n        // if the element is \"invisible\", we get an incorrect height value\n        // to get correct value, clone and append to the body.\n      if (elem.is(':visible') || parseInt(elem.css('height'), 10) > 0) {\n        min = parseInt(elem.css('height'), 10) || elem.innerHeight();\n      } else {\n        clone = elem.clone()\n            .addClass(opts.cloneClass)\n            .val(elem.val())\n            .css({\n              position: 'absolute',\n              visibility: 'hidden',\n              display: 'block'\n            });\n        $('body').append(clone);\n        min = clone.innerHeight();\n        clone.remove();\n      }\n      if (opts.fixMinHeight) {\n        elem.data('autogrow-start-height', min); // set min height\n      }\n      elem.css('height', min);\n      if (opts.onInitialize) {\n        resize.call(elem);\n      }\n    });\n    opts.context\n      .on('keyup paste', selector, resize);\n    function resize (e) {\n      var box = $(this);\n      var oldHeight = box.innerHeight();\n      var newHeight = this.scrollHeight;\n      var minHeight = box.data('autogrow-start-height') || 0;\n      var clone;\n      if (oldHeight < newHeight) { // user is typing\n        this.scrollTop = 0; // try to reduce the top of the content hiding for a second\n        opts.animate ? box.stop().animate({height: newHeight}, opts.speed) : box.innerHeight(newHeight);\n      } else if (!e || e.which === 8 || e.which === 46 || (e.ctrlKey && e.which === 88)) { // user is deleting, backspacing, or cutting\n        if (oldHeight > minHeight) { // shrink!\n          // this cloning part is not particularly necessary. however, it helps with animation\n          // since the only way to cleanly calculate where to shrink the box to is to incrementally\n          // reduce the height of the box until the $.innerHeight() and the scrollHeight differ.\n          // doing this on an exact clone to figure out the height first and then applying it to the\n          // actual box makes it look cleaner to the user\n          clone = box.clone()\n            // add clone class for extra css rules\n            .addClass(opts.cloneClass)\n            // make \"invisible\", remove height restriction potentially imposed by existing CSS\n            .css({position: 'absolute', zIndex: -10, height: ''})\n            // populate with content for consistent measuring\n            .val(box.val());\n          box.after(clone); // append as close to the box as possible for best CSS matching for clone\n          do { // reduce height until they don't match\n            newHeight = clone[0].scrollHeight - 1;\n            clone.innerHeight(newHeight);\n          } while (newHeight === clone[0].scrollHeight);\n          newHeight++; // adding one back eliminates a wiggle on deletion\n          clone.remove();\n          box.focus(); // Fix issue with Chrome losing focus from the textarea.\n          // if user selects all and deletes or holds down delete til beginning\n          // user could get here and shrink whole box\n          newHeight < minHeight && (newHeight = minHeight);\n          oldHeight > newHeight && opts.animate ? box.stop().animate({height: newHeight}, opts.speed) : box.innerHeight(newHeight);\n        } else { // just set to the minHeight\n          box.innerHeight(minHeight);\n        }\n      }\n    }\n    return that;\n  };\n})(jQuery);\n\n$(document).ready(function () {\n  $('textarea').autogrow({onInitialize: true});\n\n  // Cloner for infinite input lists\n  $('.circle--clone--list').on('click', '.circle--clone--add', function () {\n    var parent = $(this).parent('li');\n    var copy = parent.clone();\n    parent.after(copy);\n    copy.find('input, textarea, select').val('');\n    copy.find('*:first-child').focus();\n  });\n\n  $('.circle--clone--list').on('click', 'li:not(:only-child) .circle--clone--remove', function () {\n    var parent = $(this).parent('li');\n    parent.remove();\n  });\n\n  // Adds class to selected item\n  $('.circle--pill--list a').click(function () {\n    $('.circle--pill--list a').removeClass('selected');\n    $(this).addClass('selected');\n  });\n\n  // Adds class to parent div of select menu\n  $('.circle--select select').focus(function () {\n    $(this).parent().addClass('focus');\n  }).blur(function () {\n    $(this).parent().removeClass('focus');\n  });\n\n  // Clickable table row\n  $('.clickable-row').click(function () {\n    var link = $(this).data('href');\n    var target = $(this).data('target');\n\n    if ($(this).attr('data-target')) {\n      window.open(link, target);\n    } else {\n      window.open(link, '_self');\n    }\n  });\n\n  // Custom File Inputs\n  var input = $('.circle--input--file');\n  var text = input.data('text');\n  var state = input.data('state');\n  input.wrap(function () {\n    return \"<a class='button \" + state + \"'>\" + text + '</div>';\n  });\n});\n"]}